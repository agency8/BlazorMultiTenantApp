@page "/heroslist"
@inject IHeroService HeroService
@implements IDisposable

<h3>Heros</h3>



@if (HeroService.HeroList.Count <= 0)
{
    <span>Loading.../ no list of items found</span>
}
else
{

    if (isEditing)
    {
        <EditForm Model="editingHero" OnSubmit="UpdateHero">
            <div class="row">
                <div class="col-6 mb-3">
                    <label for="firstname">First name</label>
                    <InputText id="firstname" @bind-Value="editingHero.FirstName" class="form-control"></InputText>
                </div>
                <div class="col-6 mb-3">
                    <label for="lastname">First name</label>
                    <InputText id="lastname" @bind-Value="editingHero.LastName" class="form-control"></InputText>
                </div>
                <div class="col-6 mb-3">
                    <label for="heroname">Hero name</label>
                    <InputText id="heroname" @bind-Value="editingHero.HeroName" class="form-control"></InputText>
                </div>
                <div class="col-6 mb-3">
                    <label for="comic">Comic</label>
                    <InputSelect id="comic" @bind-Value="editingHero.ComicId" class="form-select">
                        @foreach (var comicItem in HeroService.ComicList)
                        {
                            <option value="@comicItem.Id">@comicItem.Name</option>
                        }
                    </InputSelect>
                </div>
                <div class="col">
                    <button button="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i> Save
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i> Cancel
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th scope="col">First Name</th>
                    <th scope="col">Last Name</th>
                    <th scope="col">Hero Name</th>
                    <th scope="col">Comic</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var hero in HeroService.HeroList)
                {
                    <tr>
                        <td>@hero.FirstName</td>
                        <td>@hero.LastName</td>
                        <td>@hero.HeroName</td>
                        <td>@hero.Comic.Name</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="(() => EditHero(hero))"><i class="oi oi-pencil"></i></button>
                            <button class="btn btn-danger btn-sm" @onclick="(() => DeleteHero(hero.Id))"><i class="oi oi-trash"></i></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button class="btn btn-success" @onclick="CreateNewHero">
            <i class="oi oi-plus"></i> Add new Super hero
        </button>
    }    
}





@code {
    private bool isEditing = false;
    Hero editingHero = new Hero();

    protected override async Task OnInitializedAsync()
    {
        await HeroService.GetHeros();
        await HeroService.GetComics();
        HeroService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        HeroService.OnChange -= StateHasChanged;
    }

    void EditHero(Hero hero)
    {
        editingHero = hero;
        isEditing = true;
    }

    async void DeleteHero(int id)
    {
        await HeroService.DeleteHero(id);
        isEditing = false;
    }

    void CreateNewHero()
    {
        isEditing = true;
    }


    private async Task UpdateHero()
    {
        if (editingHero.Id > 0)
        {
            await HeroService.UpdateHero(editingHero);
        }
        else
        {
            await HeroService.CreateHero(editingHero);
        }
        editingHero = new Hero();
        isEditing = false;
    }



    private async Task CancelEditing()
    {
        isEditing = false;
        editingHero = new Hero();
        await HeroService.GetHeros();
    }


}